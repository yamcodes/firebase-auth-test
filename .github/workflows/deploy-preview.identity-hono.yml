name: Deploy preview

on:
  pull_request:
    paths:
      - services/fat-identity-hono/**

env:
  PROJECT_ID: fat-core-dev
  REGION: europe-west3
  SERVICE_NAME: fat-identity-hono-gh
  DIR: services/fat-identity-hono
  DOCKER_AUTH_URL: europe-west3-docker.pkg.dev
  ARTIFACT_REGISTRY_REPO_URL: europe-west3-docker.pkg.dev/fat-core-dev/cloud-run-preview/firebase-auth-test/fat-identity-hono-gh

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    environment:
      name: pr-${{ github.event.pull_request.number }}---fat-identity-hono-gh
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      contents: read
      deployments: write
      id-token: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY_FAT_CORE_DEV }}

      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Authenticate Docker with Google Cloud Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.DOCKER_AUTH_URL }}

      - name: Build Docker image
        run: |
          docker build . -t ${{ env.ARTIFACT_REGISTRY_REPO_URL }}/app:${{ github.sha }} --file ${{ env.DIR }}/Dockerfile

      - name: Push the docker image to Artifact Registry
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY_REPO_URL }}/app:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.ARTIFACT_REGISTRY_REPO_URL }}/app:${{ github.sha }}
          no_traffic: true
          tag: pr-${{ github.event.pull_request.number }}
          labels: |
            managed-by=github-actions
            commit-sha=${{ github.sha }}
            pr-number=${{ github.event.pull_request.number }}

      - name: Check if the service requires authentication
        id: check_require_auth
        uses: mikefarah/yq@v4
        with:
          cmd: yq '.services[] | select(.name == "'${{ env.SERVICE_NAME }}'").require_auth' .github/preview-deployments.config.yml

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => comment.body.includes("${{ steps.deploy.outputs.url }}"));
            const requireAuth = "${{ steps.check_require_auth.outputs.result }}" === "true";
            let commentBody = `ðŸš€ Preview deployed to: ${{ steps.deploy.outputs.url }}`;

            if (existingComment) {
              commentBody += `\n\n**Updated to commit:** ${{ github.event.pull_request.head.sha }}`;
            }
            if (requireAuth) {
              commentBody += `\n\n**Note:** This preview requires authentication. ` +
                             `To access it locally, use the command below:\n` +
                             `\`\`\`bash\n` +
                             `gcloud run services proxy ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --tag=pr-${{ github.event.pull_request.number }}\n` +
                             `\`\`\`\n` +
                             `For more details, see [the guide in the Cloud Run Documentation](https://cloud.google.com/run/docs/authenticating/developers?hl=en#proxy).`;
            }

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }
