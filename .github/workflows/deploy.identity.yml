name: "fat-identity • Deploy"

on:
  push:
    branches:
      - main
      - ci/multi-env-deploy

env:
  BUILD_PROJECT_ID: fat-core-x
  REGION: europe-west3
  SERVICE_NAME: fat-identity
  DIR: services/fat-identity
  DOCKER_AUTH_URL: europe-west3-docker.pkg.dev
  TRIGGER_NAME: fat-identity
  TRIGGER_REGION: global
  POLLING_TIMEOUT_SECONDS: 300
  POLL_INTERVAL_SECONDS: 10

permissions:
  contents: read
  deployments: write
  id-token: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.trigger-build.outputs.image_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.BUILD_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY_FAT_CORE_DEV }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.BUILD_PROJECT_ID }}

      - name: Trigger Cloud Build
        id: trigger-build
        run: |
          OUTPUT=$(gcloud builds triggers run ${{ env.TRIGGER_NAME }} --region=${{ env.TRIGGER_REGION }} --branch=${{ github.ref_name }} --format=json)
          echo "Full output:"
          echo "$OUTPUT"

          # Extract Build ID
          BUILD_ID=$(echo "$OUTPUT" | jq -r '.metadata.build.id')
          if [ -z "$BUILD_ID" ]; then
            echo "ERROR: Failed to extract BUILD_ID from the output. Cannot proceed."
            exit 1
          fi
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT

          # Extract Image URL
          IMAGE_URL=$(echo "$OUTPUT" | jq -r '.metadata.build.images[0]')
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Poll Cloud Build deployment status
        run: |
          MAX_RETRIES=$(( ${{ env.POLLING_TIMEOUT_SECONDS }} / ${{ env.POLL_INTERVAL_SECONDS }} ))
          BUILD_ID=$(echo ${{ steps.trigger-build.outputs.build_id }})

          for i in $(seq 1 $MAX_RETRIES); do
            STATUS=$(gcloud builds describe $BUILD_ID --project=${{ env.BUILD_PROJECT_ID }} --format='value(status)')
            echo "Build status: $STATUS"
            if [[ "$STATUS" == "SUCCESS" ]]; then
              echo "✅ Build succeeded!"
              exit 0
            elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
              echo "❌ Build failed or cancelled."
              exit 1
            fi
            sleep ${{ env.POLL_INTERVAL_SECONDS }}
          done

          echo "❌ Build did not complete within the expected time."
          exit 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        config:
          - environment: fat-identity.fat-core-dev
            project_id: fat-core-dev
          - environment: fat-identity.fat-core-stg
            project_id: fat-core-stg
          - environment: fat-identity.fat-core-prod
            project_id: fat-core-prod
    environment: 
      name: ${{ matrix.config.environment }}
      url: ${{ steps.output-service-url.outputs.service_url }}
    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ matrix.config.project_id }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ matrix.config.project_id }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ needs.build.outputs.image_url }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --project=${{ matrix.config.project_id }} \
            --labels=environment=$(echo ${{ matrix.config.environment }} | tr '.' '_')

      - name: Output service URL
        id: output-service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --project=${{ matrix.config.project_id }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "🚀 Service deployed to ${{ matrix.config.project_id }}"
          echo $SERVICE_URL